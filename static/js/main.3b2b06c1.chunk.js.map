{"version":3,"sources":["context.js","components/WeatherCard.js","components/CardContainer.js","components/SearchMenu.js","components/DailyForecastCard.js","components/DailyForecastContainer.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","weatherData","setWeatherData","currentForecast","setCurrentForecast","makeid","text","possible","i","charAt","Math","floor","random","length","getCityData","cityName","a","fetch","response","status","json","city","getDailyForecast","coord","lon","lat","forecast","console","log","find","c","id","date","moment","format","time","alert","long","data","daily","getLocation","Promise","resolve","rejection","navigator","geolocation","getCurrentPosition","getLongLatData","position","latitude","coords","longitude","Provider","value","updateCurrentForecast","index","useGlobalContext","useContext","WeatherCard","replace","weather","description","letter","toUpperCase","className","tabIndex","onClick","onKeyUp","name","sys","country","src","icon","alt","role","round","main","temp","humidity","focusable","Date","sunset","toLocaleTimeString","CardContainer","windowDimensions","setWindowDimensions","currentCardIndex","setCurrentCardIndex","useEffect","handleResize","window","width","innerWidth","height","innerHeight","getWindowDimensions","addEventListener","removeEventListener","map","item","SearchMenu","setCityName","htmlFor","type","placeholder","onChange","e","target","preventDefault","disabled","DailyForecastCard","day","dt","toLocaleDateString","morn","feels_like","eve","night","DailyForecastContainer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b2b06c1.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [weatherData, setWeatherData] = useState([]);\r\n    const [currentForecast, setCurrentForecast] = useState(null);\r\n\r\n    const makeid = () => {\r\n        let text = \"\";\r\n        let possible =\r\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n        for (let i = 0; i < 16; i++)\r\n            text += possible.charAt(\r\n                Math.floor(Math.random() * possible.length)\r\n            );\r\n        return text;\r\n    };\r\n\r\n    const getCityData = async (cityName) => {\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        if (response.status !== 404) {\r\n            const city = await response.json();\r\n            const forecast = await getDailyForecast(\r\n                city.coord.lon,\r\n                city.coord.lat\r\n            );\r\n            console.log(city);\r\n            if (!weatherData.find((c) => c.city.id === city.id)) {\r\n                setWeatherData([\r\n                    ...weatherData,\r\n                    {\r\n                        city: {\r\n                            ...city,\r\n                            date: moment().format(\"LL\"),\r\n                            time: moment().format(\"LTS\"),\r\n                        },\r\n                        forecast,\r\n                    },\r\n                ]);\r\n            }\r\n        } else {\r\n            alert(\"Error - Invalid Location Entered\");\r\n        }\r\n    };\r\n\r\n    const getDailyForecast = async (long, lat) => {\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=current,minutely,hourly,alerts&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        const data = await response.json();\r\n        const daily = [...data.daily];\r\n        daily[1].id = makeid();\r\n        daily[2].id = makeid();\r\n        daily[3].id = makeid();\r\n        daily[4].id = makeid();\r\n        daily[5].id = makeid();\r\n        daily[6].id = makeid();\r\n        daily[7].id = makeid();\r\n        return { ...data, daily };\r\n    };\r\n\r\n    const getLocation = () => {\r\n        return new Promise((resolve, rejection) => {\r\n            navigator.geolocation.getCurrentPosition(resolve, rejection);\r\n        });\r\n    };\r\n\r\n    const getLongLatData = async () => {\r\n        const position = await getLocation();\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        if (response.status !== 404) {\r\n            const city = await response.json();\r\n            const forecast = await getDailyForecast(longitude, latitude);\r\n            if (!weatherData.find((c) => c.city.id === city.id)) {\r\n                setWeatherData([\r\n                    ...weatherData,\r\n                    {\r\n                        city: {\r\n                            ...city,\r\n                            date: moment().format(\"LL\"),\r\n                            time: moment().format(\"LTS\"),\r\n                        },\r\n                        forecast,\r\n                    },\r\n                ]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateCurrentForecast = (index) => {\r\n        setCurrentForecast(weatherData[index].forecast);\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                weatherData,\r\n                currentForecast,\r\n                getCityData,\r\n                getLongLatData,\r\n                getLocation,\r\n                setCurrentForecast,\r\n                updateCurrentForecast,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { FiSunset } from \"react-icons/fi\";\r\nimport { WiHumidity } from \"react-icons/wi\";\r\n\r\nconst WeatherCard = ({ weatherData, index, position }) => {\r\n    const { updateCurrentForecast } = useGlobalContext();\r\n\r\n    const words = weatherData.weather[0].description;\r\n    const replace = words.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\r\n        letter.toUpperCase()\r\n    );\r\n\r\n    return (\r\n        <div\r\n            id={weatherData.id}\r\n            className={`${\r\n                position ? `weather-card ${position}` : \"weather-card\"\r\n            }`}\r\n            tabIndex=\"0\"\r\n            onClick={() => updateCurrentForecast(index)}\r\n            onKeyUp={() => updateCurrentForecast(index)}\r\n        >\r\n            <div className=\"weather-info\">\r\n                <h3 id=\"weather-header\">\r\n                    {weatherData.name}{\" \"}\r\n                    <span id=\"weather-country\">{weatherData.sys.country}</span>\r\n                </h3>\r\n                <p id=\"weather-date\">{weatherData.date}</p>\r\n                <p id=\"weather-time\">{weatherData.time}</p>\r\n            </div>\r\n            <div className=\"weather-info\" id=\"weather-temp-info\">\r\n                <img\r\n                    id=\"weather-img\"\r\n                    src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png`}\r\n                    alt=\"weather icon\"\r\n                    role=\"presentation\"\r\n                />\r\n                <p id=\"weather-description\">{replace}</p>\r\n                <p id=\"weather-temp\">\r\n                    {Math.round(weatherData.main.temp)}&deg;C\r\n                </p>\r\n            </div>\r\n            <div className=\"weather-info\">\r\n                <p id=\"weather-humidity\">\r\n                    <span>Humidity:</span>\r\n                    <span id=\"humidity-data\">{weatherData.main.humidity}%</span>\r\n                    <span className=\"icon\" id=\"humidity-icon\">\r\n                        <WiHumidity aria-hidden={true} focusable={false} />\r\n                    </span>\r\n                </p>\r\n                <p id=\"weather-sunset\">\r\n                    <span>Sunset: </span>\r\n                    <span>\r\n                        {new Date(\r\n                            weatherData.sys.sunset * 1000\r\n                        ).toLocaleTimeString(\"en-GB\")}\r\n                        pm\r\n                    </span>\r\n                    <span className=\"icon\" id=\"sunset-icon\">\r\n                        <FiSunset aria-hidden={true} focusable={false} />\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { BiLeftArrow, BiRightArrow } from \"react-icons/bi\";\r\n\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst CardContainer = () => {\r\n    const { weatherData } = useGlobalContext();\r\n\r\n    const [windowDimensions, setWindowDimensions] = useState({});\r\n    const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n\r\n    const getWindowDimensions = () => {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return { width, height };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(getWindowDimensions());\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setCurrentCardIndex(weatherData.length - 1);\r\n    }, [weatherData]);\r\n\r\n    if (weatherData.length === 0) {\r\n        return (\r\n            <div id=\"weather-data-container\">\r\n                <div></div>\r\n            </div>\r\n        );\r\n    }\r\n    if (\r\n        (windowDimensions.width <= 450 && windowDimensions.height <= 812) ||\r\n        (windowDimensions.width <= 812 && windowDimensions.height <= 450)\r\n    ) {\r\n        return (\r\n            <div id=\"weather-data-container\">\r\n                {weatherData.map((item, index) => {\r\n                    const position =\r\n                        index < currentCardIndex\r\n                            ? \"previous-card\"\r\n                            : index > currentCardIndex\r\n                            ? \"next-card\"\r\n                            : \"active-card\";\r\n                    return (\r\n                        <WeatherCard\r\n                            key={item.city.id}\r\n                            index={index}\r\n                            weatherData={item.city}\r\n                            position={position}\r\n                        />\r\n                    );\r\n                })}\r\n                <button\r\n                    id=\"prev-btn\"\r\n                    className=\"prev-next-btn\"\r\n                    onClick={() => {\r\n                        if (currentCardIndex > 0) {\r\n                            setCurrentCardIndex(currentCardIndex - 1);\r\n                        }\r\n                    }}\r\n                >\r\n                    <BiLeftArrow\r\n                        className=\"btn-icon\"\r\n                        id=\"prev-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <button\r\n                    id=\"next-btn\"\r\n                    className=\"prev-next-btn\"\r\n                    onClick={() => {\r\n                        if (currentCardIndex < weatherData.length - 1) {\r\n                            setCurrentCardIndex(currentCardIndex + 1);\r\n                        }\r\n                    }}\r\n                >\r\n                    <BiRightArrow\r\n                        className=\"btn-icon\"\r\n                        id=\"next-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div id=\"weather-data-container\">\r\n            {weatherData.map((item, index) => {\r\n                return (\r\n                    <WeatherCard\r\n                        key={item.city.id}\r\n                        index={index}\r\n                        weatherData={item.city}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { MdLocationSearching } from \"react-icons/md\";\r\n\r\nconst SearchMenu = () => {\r\n    const { getLongLatData, getCityData } = useGlobalContext();\r\n    const [cityName, setCityName] = useState(\"\");\r\n\r\n    return (\r\n        <form id=\"location-searchbar\">\r\n            <div className=\"location-bar\">\r\n                <label htmlFor=\"location-input\" className=\"hidden-label\">\r\n                    Location Input\r\n                </label>\r\n                <input\r\n                    id=\"location-input\"\r\n                    type=\"text\"\r\n                    value={cityName}\r\n                    placeholder=\"Search for a location\"\r\n                    onChange={(e) => {\r\n                        setCityName(e.target.value);\r\n                    }}\r\n                    tabIndex=\"0\"\r\n                />\r\n                <label htmlFor=\"search-btn\" className=\"hidden-label\">\r\n                    Search Button\r\n                </label>\r\n                <button\r\n                    id=\"search-btn\"\r\n                    type=\"submit\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        getCityData(cityName);\r\n                        setCityName(\"\");\r\n                    }}\r\n                    disabled={cityName === \"\" ? true : false}\r\n                >\r\n                    Submit\r\n                </button>\r\n                <label htmlFor=\"current-location-btn\" className=\"hidden-label\">\r\n                    Current Location Button\r\n                </label>\r\n                <button\r\n                    id=\"current-location-btn\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        getLongLatData();\r\n                    }}\r\n                >\r\n                    <MdLocationSearching\r\n                        id=\"location-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchMenu;\r\n","import React from \"react\";\r\nimport { WiHumidity } from \"react-icons/wi\";\r\n\r\nconst DailyForecastCard = ({ day }) => {\r\n    const words = day.weather[0].description;\r\n    const replace = words.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\r\n        letter.toUpperCase()\r\n    );\r\n\r\n    return (\r\n        <div className=\"forecast-card\">\r\n            <div className=\"forecast-weather-info\" id=\"forecast-temp-info\">\r\n                <h4 id=\"forecast-header\">\r\n                    {new Date(day.dt * 1000).toLocaleDateString(\"en-GB\")}\r\n                </h4>\r\n                <img\r\n                    id=\"forecast-img\"\r\n                    src={`http://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n                    alt=\"forecast weather icon\"\r\n                    role=\"presentation\"\r\n                />\r\n                <p id=\"forecast-description\">{replace}</p>\r\n            </div>\r\n            <p id=\"forecast-humidity\">\r\n                <span>Humidity:</span>\r\n                <span id=\"forecast-humidity-data\">{day.humidity}%</span>\r\n                <span className=\"icon\" id=\"forecast-humidity-icon\">\r\n                    <WiHumidity aria-hidden={true} focusable={false} />\r\n                </span>\r\n            </p>\r\n            <table className=\"forecast-weather-info\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <th>Temp</th>\r\n                        <th>Feels Like</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Morning</th>\r\n                        <td>{Math.round(day.temp.morn)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.morn)}&deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Afternoon</th>\r\n                        <td>{Math.round(day.temp.day)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.day)}&deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Evening</th>\r\n                        <td>{Math.round(day.temp.eve)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.eve)}&deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Night</th>\r\n                        <td>{Math.round(day.temp.night)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.night)}&deg;C</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyForecastCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport DailyForecastCard from \"./DailyForecastCard\";\r\n\r\nconst DailyForecastContainer = () => {\r\n    const { currentForecast } = useGlobalContext();\r\n\r\n    return (\r\n        <div id=\"daily-weather-forecast\">\r\n            {currentForecast &&\r\n                currentForecast.daily.map((day, index) => {\r\n                    if (index !== 0) {\r\n                        return <DailyForecastCard key={day.id} day={day} />;\r\n                    }\r\n                })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyForecastContainer;\r\n","import React from \"react\";\nimport CardContainer from \"./components/CardContainer\";\nimport SearchMenu from \"./components/SearchMenu\";\nimport DailyForecastContainer from \"./components/DailyForecastContainer\";\n\nconst App = () => {\n    return (\n        <div id=\"app-container\">\n            <SearchMenu />\n            <CardContainer />\n            <DailyForecastContainer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}