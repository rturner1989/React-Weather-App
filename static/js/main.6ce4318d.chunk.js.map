{"version":3,"sources":["context.js","components/WeatherCard.js","components/CardContainer.js","components/SearchMenu.js","components/DailyForecastCard.js","components/DailyForecastContainer.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","weatherData","setWeatherData","currentForecast","setCurrentForecast","makeid","text","possible","i","charAt","Math","floor","random","length","getCityData","cityName","a","fetch","response","status","json","city","getDailyForecast","coord","lon","lat","forecast","find","c","id","time","moment","format","alert","long","data","daily","getLocation","Promise","resolve","rejection","navigator","geolocation","getCurrentPosition","getLongLatData","position","latitude","coords","longitude","Provider","value","updateCurrentForecast","index","useGlobalContext","useContext","WeatherCard","replace","weather","description","letter","toUpperCase","className","onClick","name","src","icon","alt","round","main","temp","humidity","Date","sys","sunset","toLocaleTimeString","CardContainer","map","item","SearchMenu","setCityName","type","placeholder","onChange","e","target","preventDefault","disabled","DailyForecastCard","day","dt","toLocaleDateString","morn","feels_like","eve","night","DailyForecastContainer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ce4318d.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [weatherData, setWeatherData] = useState([]);\r\n    const [currentForecast, setCurrentForecast] = useState(null);\r\n\r\n    const makeid = () => {\r\n        let text = \"\";\r\n        let possible =\r\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n        for (let i = 0; i < 16; i++)\r\n            text += possible.charAt(\r\n                Math.floor(Math.random() * possible.length)\r\n            );\r\n        return text;\r\n    };\r\n\r\n    const getCityData = async (cityName) => {\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        if (response.status !== 404) {\r\n            const city = await response.json();\r\n            const forecast = await getDailyForecast(\r\n                city.coord.lon,\r\n                city.coord.lat\r\n            );\r\n            if (!weatherData.find((c) => c.city.id === city.id)) {\r\n                setWeatherData([\r\n                    ...weatherData,\r\n                    {\r\n                        city: { ...city, time: moment().format(\"LTS\") },\r\n                        forecast,\r\n                    },\r\n                ]);\r\n            }\r\n        } else {\r\n            alert(\"Error - Invalid Location Entered\");\r\n        }\r\n    };\r\n\r\n    const getDailyForecast = async (long, lat) => {\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=current,minutely,hourly,alerts&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        const data = await response.json();\r\n        const daily = [...data.daily];\r\n        daily[1].id = makeid();\r\n        daily[2].id = makeid();\r\n        daily[3].id = makeid();\r\n        daily[4].id = makeid();\r\n        daily[5].id = makeid();\r\n        daily[6].id = makeid();\r\n        daily[7].id = makeid();\r\n        return { ...data, daily };\r\n    };\r\n\r\n    const getLocation = () => {\r\n        return new Promise((resolve, rejection) => {\r\n            navigator.geolocation.getCurrentPosition(resolve, rejection);\r\n        });\r\n    };\r\n\r\n    const getLongLatData = async () => {\r\n        const position = await getLocation();\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        if (response.status !== 404) {\r\n            const city = await response.json();\r\n            const forecast = await getDailyForecast(longitude, latitude);\r\n            if (!weatherData.find((c) => c.city.id === city.id)) {\r\n                setWeatherData([\r\n                    ...weatherData,\r\n                    {\r\n                        city: { ...city, time: moment().format(\"LTS\") },\r\n                        forecast,\r\n                    },\r\n                ]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateCurrentForecast = (index) => {\r\n        setCurrentForecast(weatherData[index].forecast);\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                weatherData,\r\n                currentForecast,\r\n                getCityData,\r\n                getLongLatData,\r\n                getLocation,\r\n                setCurrentForecast,\r\n                updateCurrentForecast,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nconst WeatherCard = ({ weatherData, index }) => {\r\n    const { updateCurrentForecast } = useGlobalContext();\r\n\r\n    const words = weatherData.weather[0].description;\r\n    const replace = words.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\r\n        letter.toUpperCase()\r\n    );\r\n\r\n    return (\r\n        <div\r\n            id={weatherData.id}\r\n            className=\"weather-card\"\r\n            onClick={() => updateCurrentForecast(index)}\r\n        >\r\n            <div className=\"weather-info\">\r\n                <h3>{weatherData.name}</h3>\r\n                <p>Time: {weatherData.time}</p>\r\n            </div>\r\n            <div className=\"weather-info\">\r\n                <img\r\n                    src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png`}\r\n                    alt=\"weather icon\"\r\n                />\r\n                <p>{replace}</p>\r\n                <p>{Math.round(weatherData.main.temp)}&deg;C</p>\r\n            </div>\r\n            <div className=\"weather-info\">\r\n                <p>Humidity: {weatherData.main.humidity}%</p>\r\n                <p>\r\n                    Sunset:{\" \"}\r\n                    {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString(\r\n                        \"en-GB\"\r\n                    )}\r\n                    pm\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst CardContainer = () => {\r\n    const { weatherData } = useGlobalContext();\r\n    return (\r\n        <div id=\"weather-data-container\">\r\n            {weatherData.length !== 0 ? (\r\n                weatherData.map((item, index) => {\r\n                    return (\r\n                        <WeatherCard\r\n                            key={index}\r\n                            index={index}\r\n                            weatherData={item.city}\r\n                        />\r\n                    );\r\n                })\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { GrLocation } from \"react-icons/gr\";\r\n\r\nconst SearchMenu = () => {\r\n    const [cityName, setCityName] = useState(\"\");\r\n\r\n    const { getLongLatData, getCityData } = useGlobalContext();\r\n\r\n    return (\r\n        <div id=\"location-searchbar\">\r\n            <form className=\"location-bar\">\r\n                <input\r\n                    id=\"location-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search for a location\"\r\n                    onChange={(e) => setCityName(e.target.value)}\r\n                />\r\n                <div>\r\n                    <button\r\n                        id=\"search-btn\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            getCityData(cityName);\r\n                        }}\r\n                        disabled={cityName === \"\" ? true : false}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                    <button\r\n                        id=\"current-location-btn\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            getLongLatData();\r\n                        }}\r\n                    >\r\n                        <GrLocation />\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchMenu;\r\n","import React from \"react\";\r\n\r\nconst DailyForecastCard = ({ day }) => {\r\n    const words = day.weather[0].description;\r\n    const replace = words.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\r\n        letter.toUpperCase()\r\n    );\r\n\r\n    return (\r\n        <div className=\"forecast-card\">\r\n            <h4 className=\"daily-weather-info\">\r\n                {new Date(day.dt * 1000).toLocaleDateString(\"en-GB\")}\r\n            </h4>\r\n            <img\r\n                src={`http://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n                alt=\"weather icon\"\r\n            />\r\n            <p className=\"forecast-info\">{replace}</p>\r\n            <p className=\"forecast-info\"> Humidity: {day.humidity}%</p>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <th>Temp</th>\r\n                        <th>Feels Like</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Morning</th>\r\n                        <td>{Math.round(day.temp.morn)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.morn)}&deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Afternoon</th>\r\n                        <td>{Math.round(day.temp.day)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.day)}&deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Evening</th>\r\n                        <td>{Math.round(day.temp.eve)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.eve)}&deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Night</th>\r\n                        <td>{Math.round(day.temp.night)}&deg;C</td>\r\n                        <td>{Math.round(day.feels_like.night)}&deg;C</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyForecastCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport DailyForecastCard from \"./DailyForecastCard\";\r\n\r\nconst DailyForecastContainer = () => {\r\n    const { currentForecast } = useGlobalContext();\r\n\r\n    return (\r\n        <div id=\"daily-weather-forecast\">\r\n            {currentForecast &&\r\n                currentForecast.daily.map((day, index) => {\r\n                    if (index !== 0) {\r\n                        return <DailyForecastCard key={day.id} day={day} />;\r\n                    }\r\n                })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyForecastContainer;\r\n","import React from \"react\";\nimport CardContainer from \"./components/CardContainer\";\nimport SearchMenu from \"./components/SearchMenu\";\nimport DailyForecastContainer from \"./components/DailyForecastContainer\";\n\nconst App = () => {\n    return (\n        <div id=\"app-container\">\n            <SearchMenu />\n            <CardContainer />\n            <DailyForecastContainer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}