{"version":3,"sources":["Context.js","components/WeatherCard.js","components/CardContainer.js","components/SearchMenu.js","components/DailyForecastCard.js","components/DailyForecastContainer.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","weatherData","setWeatherData","currentForecast","setCurrentForecast","getCityData","cityName","a","fetch","response","status","json","city","getDailyForecast","coord","lon","lat","forecast","time","moment","format","alert","long","data","console","log","getLocation","Promise","resolve","rejection","navigator","geolocation","getCurrentPosition","getLongLatData","position","latitude","coords","longitude","Provider","value","updateCurrentForecast","index","useGlobalContext","useContext","WeatherCard","id","className","onClick","name","src","weather","icon","alt","description","main","temp","humidity","Date","sys","sunset","toLocaleTimeString","CardContainer","length","map","item","SearchMenu","setCityName","type","placeholder","onChange","e","target","preventDefault","disabled","DailyForecastCard","day","dt","toLocaleDateString","morn","feels_like","eve","night","DailyForecastContainer","daily","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.293a6e49.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [weatherData, setWeatherData] = useState([]);\r\n    const [currentForecast, setCurrentForecast] = useState(null);\r\n\r\n    const getCityData = async (cityName) => {\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        if (response.status !== 404) {\r\n            const city = await response.json();\r\n            const forecast = await getDailyForecast(\r\n                city.coord.lon,\r\n                city.coord.lat\r\n            );\r\n            setWeatherData([\r\n                ...weatherData,\r\n                { city: { ...city, time: moment().format(\"LTS\") }, forecast },\r\n            ]);\r\n        } else {\r\n            alert(\"Error - Invalid Location Entered\");\r\n        }\r\n    };\r\n\r\n    const getDailyForecast = async (long, lat) => {\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=current,minutely,hourly,alerts&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        return data;\r\n    };\r\n\r\n    const getLocation = () => {\r\n        return new Promise((resolve, rejection) => {\r\n            navigator.geolocation.getCurrentPosition(resolve, rejection);\r\n        });\r\n    };\r\n\r\n    const getLongLatData = async () => {\r\n        const position = await getLocation();\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n\r\n        const response = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=91d2f9efc77a289707cbc8c106b46727`\r\n        );\r\n        const city = await response.json();\r\n        const forecast = await getDailyForecast(latitude, longitude);\r\n        setWeatherData([\r\n            ...weatherData,\r\n            { city: { ...city, time: moment().format(\"LTS\") }, forecast },\r\n        ]);\r\n    };\r\n\r\n    const updateCurrentForecast = (index) => {\r\n        setCurrentForecast(weatherData[index].forecast);\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                weatherData,\r\n                currentForecast,\r\n                getCityData,\r\n                getLongLatData,\r\n                getLocation,\r\n                setCurrentForecast,\r\n                updateCurrentForecast,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\n\r\nconst WeatherCard = ({ weatherData, index }) => {\r\n    const { updateCurrentForecast } = useGlobalContext();\r\n    return (\r\n        <div\r\n            id={weatherData.id}\r\n            className=\"weather-card\"\r\n            onClick={() => updateCurrentForecast(index)}\r\n        >\r\n            <h3>{weatherData.name}</h3>\r\n            <p className=\"weather-info\">Time: {weatherData.time}</p>\r\n            <hr />\r\n            <img\r\n                src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png`}\r\n                alt=\"weather icon\"\r\n            />\r\n            <p className=\"weather-info\">{weatherData.weather[0].description}</p>\r\n            <p className=\"weather-info\">{weatherData.main.temp}&deg;C</p>\r\n            <hr />\r\n            <p className=\"weather-info\">\r\n                Humidity: {weatherData.main.humidity}%\r\n            </p>\r\n            <p className=\"weather-info\">\r\n                Sunset:{\" \"}\r\n                {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString(\r\n                    \"en-GB\"\r\n                )}\r\n                pm\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\n\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst CardContainer = () => {\r\n    const { weatherData } = useGlobalContext();\r\n    return (\r\n        <div id=\"weather-data-container\">\r\n            {weatherData.length !== 0 ? (\r\n                weatherData.map((item, index) => {\r\n                    return (\r\n                        <WeatherCard\r\n                            key={index}\r\n                            index={index}\r\n                            weatherData={item.city}\r\n                        />\r\n                    );\r\n                })\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport { GrLocation } from \"react-icons/gr\";\r\n\r\nconst SearchMenu = () => {\r\n    const [cityName, setCityName] = useState(\"\");\r\n\r\n    const { getLongLatData, getCityData } = useGlobalContext();\r\n\r\n    return (\r\n        <form id=\"location-searchbar\">\r\n            <input\r\n                id=\"location-input\"\r\n                type=\"text\"\r\n                placeholder=\"Search for a location\"\r\n                onChange={(e) => setCityName(e.target.value)}\r\n            />\r\n            <button\r\n                id=\"search-btn\"\r\n                type=\"submit\"\r\n                onClick={(e) => {\r\n                    e.preventDefault();\r\n                    getCityData(cityName);\r\n                }}\r\n                disabled={cityName === \"\" ? true : false}\r\n            >\r\n                Submit\r\n            </button>\r\n            <button\r\n                id=\"current-location-btn\"\r\n                type=\"submit\"\r\n                onClick={(e) => {\r\n                    e.preventDefault();\r\n                    getLongLatData();\r\n                }}\r\n            >\r\n                <GrLocation />\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchMenu;\r\n","import React from \"react\";\r\n\r\nconst DailyForecastCard = ({ day }) => {\r\n    return (\r\n        <div className=\"forecast-card\">\r\n            <h4 className=\"daily-weather-info\">\r\n                {new Date(day.dt * 1000).toLocaleDateString(\"en-GB\")}\r\n            </h4>\r\n            <img\r\n                src={`http://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n                alt=\"weather icon\"\r\n            />\r\n            <p className=\"forecast-info\">{day.weather[0].description}</p>\r\n            <table>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>Temp</td>\r\n                    <td>Feels Like</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Morning</td>\r\n                    <td>{day.temp.morn}&deg;C</td>\r\n                    <td>{day.feels_like.morn}&deg;C</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Afternoon</td>\r\n                    <td>{day.temp.day}&deg;C</td>\r\n                    <td>{day.feels_like.day}&deg;C</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Evening</td>\r\n                    <td>{day.temp.eve}&deg;C</td>\r\n                    <td>{day.feels_like.eve}&deg;C</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Night</td>\r\n                    <td>{day.temp.night}&deg;C</td>\r\n                    <td>{day.feels_like.night}&deg;C</td>\r\n                </tr>\r\n            </table>\r\n            {/* <p className=\"forecast-info\">Morning {day.temp.morn}&deg;C</p>\r\n            <p className=\"forecast-info\">Afternoon {day.temp.day}&deg;C</p>\r\n            <p className=\"forecast-info\">Evening {day.temp.eve}&deg;C</p>\r\n            <p className=\"forecast-info\">Night {day.temp.night}&deg;C</p> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyForecastCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport DailyForecastCard from \"./DailyForecastCard\";\r\n\r\nconst DailyForecastContainer = () => {\r\n    const { currentForecast } = useGlobalContext();\r\n    return (\r\n        <div id=\"daily-weather-forecast\">\r\n            {currentForecast &&\r\n                currentForecast.daily.map((day, index) => {\r\n                    if (index !== 0) {\r\n                        return <DailyForecastCard key={index} day={day} />;\r\n                    }\r\n                })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyForecastContainer;\r\n","import React from \"react\";\nimport CardContainer from \"./components/CardContainer\";\nimport SearchMenu from \"./components/SearchMenu\";\nimport DailyForecastContainer from \"./components/DailyForecastContainer\";\n\nconst App = () => {\n    return (\n        <div id=\"app-container\">\n            <SearchMenu />\n            <CardContainer />\n            <DailyForecastContainer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./Context\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}